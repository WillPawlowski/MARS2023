// Generated by gencpp from file mars_robot_msgs/sensor_msg.msg
// DO NOT EDIT!


#ifndef MARS_ROBOT_MSGS_MESSAGE_SENSOR_MSG_H
#define MARS_ROBOT_MSGS_MESSAGE_SENSOR_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mars_robot_msgs
{
template <class ContainerAllocator>
struct sensor_msg_
{
  typedef sensor_msg_<ContainerAllocator> Type;

  sensor_msg_()
    : auger_depth(0)
    , auger_accel_z(0.0)
    , auger_accel_x(0.0)  {
    }
  sensor_msg_(const ContainerAllocator& _alloc)
    : auger_depth(0)
    , auger_accel_z(0.0)
    , auger_accel_x(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _auger_depth_type;
  _auger_depth_type auger_depth;

   typedef float _auger_accel_z_type;
  _auger_accel_z_type auger_accel_z;

   typedef float _auger_accel_x_type;
  _auger_accel_x_type auger_accel_x;





  typedef boost::shared_ptr< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> const> ConstPtr;

}; // struct sensor_msg_

typedef ::mars_robot_msgs::sensor_msg_<std::allocator<void> > sensor_msg;

typedef boost::shared_ptr< ::mars_robot_msgs::sensor_msg > sensor_msgPtr;
typedef boost::shared_ptr< ::mars_robot_msgs::sensor_msg const> sensor_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mars_robot_msgs::sensor_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mars_robot_msgs::sensor_msg_<ContainerAllocator1> & lhs, const ::mars_robot_msgs::sensor_msg_<ContainerAllocator2> & rhs)
{
  return lhs.auger_depth == rhs.auger_depth &&
    lhs.auger_accel_z == rhs.auger_accel_z &&
    lhs.auger_accel_x == rhs.auger_accel_x;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mars_robot_msgs::sensor_msg_<ContainerAllocator1> & lhs, const ::mars_robot_msgs::sensor_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mars_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce384a3455ea54b3bf3d0b088d180fe5";
  }

  static const char* value(const ::mars_robot_msgs::sensor_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce384a3455ea54b3ULL;
  static const uint64_t static_value2 = 0xbf3d0b088d180fe5ULL;
};

template<class ContainerAllocator>
struct DataType< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mars_robot_msgs/sensor_msg";
  }

  static const char* value(const ::mars_robot_msgs::sensor_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 auger_depth\n"
"float32 auger_accel_z\n"
"float32 auger_accel_x\n"
;
  }

  static const char* value(const ::mars_robot_msgs::sensor_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.auger_depth);
      stream.next(m.auger_accel_z);
      stream.next(m.auger_accel_x);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensor_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mars_robot_msgs::sensor_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mars_robot_msgs::sensor_msg_<ContainerAllocator>& v)
  {
    s << indent << "auger_depth: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.auger_depth);
    s << indent << "auger_accel_z: ";
    Printer<float>::stream(s, indent + "  ", v.auger_accel_z);
    s << indent << "auger_accel_x: ";
    Printer<float>::stream(s, indent + "  ", v.auger_accel_x);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARS_ROBOT_MSGS_MESSAGE_SENSOR_MSG_H
